// <auto-generated />
using System;
using EventAPI.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventAPI.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20230521125612_First version")]
    partial class Firstversion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("EventAPI.DomainModel.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactPerson = "John Doe1",
                            Description = "Description 1",
                            EndDateTime = new DateTime(2023, 5, 31, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1441),
                            Location = "location 1",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1464),
                            TimeZone = "timezone 1",
                            Title = "Title 1"
                        },
                        new
                        {
                            Id = 2,
                            ContactPerson = "John Doe2",
                            Description = "Description 2",
                            EndDateTime = new DateTime(2023, 6, 5, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1468),
                            Location = "location 2",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1470),
                            TimeZone = "timezone 2",
                            Title = "Title 2"
                        },
                        new
                        {
                            Id = 3,
                            ContactPerson = "John Doe3",
                            Description = "Description 3",
                            EndDateTime = new DateTime(2023, 6, 10, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1473),
                            Location = "location 3",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1474),
                            TimeZone = "timezone 1",
                            Title = "Title 3"
                        },
                        new
                        {
                            Id = 4,
                            ContactPerson = "John Doe3",
                            Description = "Description 3",
                            EndDateTime = new DateTime(2023, 6, 10, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1476),
                            Location = "location 3",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1477),
                            TimeZone = "timezone 1",
                            Title = "Title 4"
                        },
                        new
                        {
                            Id = 5,
                            ContactPerson = "John Doe1",
                            Description = "Description 1",
                            EndDateTime = new DateTime(2023, 5, 31, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1480),
                            Location = "location 1",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1481),
                            TimeZone = "timezone 1",
                            Title = "Title 5"
                        },
                        new
                        {
                            Id = 6,
                            ContactPerson = "John Doe2",
                            Description = "Description 2",
                            EndDateTime = new DateTime(2023, 6, 5, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1484),
                            Location = "location 2",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1485),
                            TimeZone = "timezone 2",
                            Title = "Title 6"
                        },
                        new
                        {
                            Id = 7,
                            ContactPerson = "John Doe3",
                            Description = "Description 3",
                            EndDateTime = new DateTime(2023, 6, 10, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1488),
                            Location = "location 3",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1489),
                            TimeZone = "timezone 1",
                            Title = "Title 7"
                        },
                        new
                        {
                            Id = 8,
                            ContactPerson = "John Doe3",
                            Description = "Description 3",
                            EndDateTime = new DateTime(2023, 6, 10, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1491),
                            Location = "location 3",
                            StartDateTime = new DateTime(2023, 5, 21, 20, 56, 11, 622, DateTimeKind.Local).AddTicks(1493),
                            TimeZone = "timezone 1",
                            Title = "Title 8"
                        });
                });

            modelBuilder.Entity("EventAPI.DomainModel.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accepted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Invitations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accepted = false,
                            EventId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Accepted = false,
                            EventId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Accepted = true,
                            EventId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EventAPI.DomainModel.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EventAPI.DomainModel.Invitation", b =>
                {
                    b.HasOne("EventAPI.DomainModel.Event", "Event")
                        .WithMany("Invitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventAPI.DomainModel.Participant", b =>
                {
                    b.HasOne("EventAPI.DomainModel.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventAPI.DomainModel.Event", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
